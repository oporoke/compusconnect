generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                  String               @id @default(cuid())
  name                String
  grade               String
  section             String
  disciplinaryRecords DisciplinaryRecord[]
  grades              Grade[]
  invoices            Invoice[]
  attendance          AttendanceRecord[]
  libraryTransactions LibraryTransaction[]
  canteenAccount      CanteenAccount?
  mentorshipsAsMentee Mentorship[]         @relation("Mentee")
  healthRecord        HealthRecord?
  hostelRoomId        String?
  hostelRoom          Room?                @relation(fields: [hostelRoomId], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model DisciplinaryRecord {
  id          String   @id @default(cuid())
  date        DateTime
  reason      String
  actionTaken String
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
}

model Exam {
  id       String        @id @default(cuid())
  name     String
  date     DateTime
  subjects ExamSubject[]
  grades   Grade[]
}

model ExamSubject {
  id     String @id @default(cuid())
  examId String
  name   String
  exam   Exam   @relation(fields: [examId], references: [id])
}

model Grade {
  studentId String
  examId    String
  scores    Json

  student Student @relation(fields: [studentId], references: [id])
  exam    Exam    @relation(fields: [examId], references: [id])

  @@id([studentId, examId])
}

model Staff {
  id                 String          @id @default(cuid())
  name               String
  role               String
  department         String
  email              String          @unique
  phone              String
  joiningDate        DateTime
  salary             Int
  leavesTaken        Int
  leavesAvailable    Int
  performanceNotes   String?
  taxDeduction       Float
  insuranceDeduction Float
  schoolId           String
  assignedAssets     Asset[]
  payrollRecords     PayrollRecord[]
  drivenRoutes       Route[]
}

model Admission {
  id             String   @id @default(cuid())
  name           String
  age            Int
  previousSchool String
  grade          String
  parentName     String
  parentEmail    String
  date           DateTime
  status         String
  documents      Json
}

model FeeStructure {
  id     String              @id @default(cuid())
  name   String
  amount Int
  grades FeeStructureGrade[]
}

model FeeStructureGrade {
  id             String       @id @default(cuid())
  feeStructureId String
  grade          String
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
}

model Invoice {
  id        String    @id @default(cuid())
  studentId String
  date      DateTime
  dueDate   DateTime
  items     Json
  total     Int
  status    String
  student   Student   @relation(fields: [studentId], references: [id])
  payments  Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  amount    Int
  date      DateTime
  method    String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
}

model PayrollRecord {
  id          String   @id @default(cuid())
  staffId     String
  month       String
  grossSalary Int
  deductions  Int
  netSalary   Int
  date        DateTime
  staff       Staff    @relation(fields: [staffId], references: [id])
}

model Expense {
  id          String   @id @default(cuid())
  category    String
  description String
  amount      Int
  date        DateTime
}

model Announcement {
  id       String   @id @default(cuid())
  title    String
  date     DateTime
  content  String
  schoolId String
}

model Event {
  id          String   @id @default(cuid())
  title       String
  date        DateTime
  description String
}

model Conversation {
  id       String               @id @default(cuid())
  members  ConversationMember[]
  messages Message[]
}

model ConversationMember {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id             String       @id @default(cuid())
  sender         String
  content        String
  timestamp      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Book {
  id           String               @id @default(cuid())
  rfid         String?              @unique
  title        String
  author       String
  subject      String
  isbn         String
  quantity     Int
  available    Int
  transactions LibraryTransaction[]
}

model LibraryTransaction {
  id        String    @id @default(cuid())
  studentId String
  bookId    String
  type      String
  date      DateTime
  dueDate   DateTime?
  student   Student   @relation(fields: [studentId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])
}

model Vehicle {
  id       String @id @default(cuid())
  model    String
  capacity Int
  lat      Float
  lng      Float
  route    Route?
}

model Driver {
  id            String @id @default(cuid())
  name          String
  licenseNumber String
  contact       String
  route         Route?
}

model Route {
  id        String  @id @default(cuid())
  name      String
  stops     Json
  vehicleId String  @unique
  driverId  String  @unique
  staffId   String?
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  driver    Driver  @relation(fields: [driverId], references: [id])
  staff     Staff?  @relation(fields: [staffId], references: [id])
}

model Hostel {
  id       String @id @default(cuid())
  name     String
  capacity Int
  rooms    Room[]
}

model Room {
  id        String    @id @default(cuid())
  number    String
  capacity  Int
  hostelId  String
  hostel    Hostel    @relation(fields: [hostelId], references: [id])
  occupants Student[]
}

model AttendanceRecord {
  id        String   @id @default(cuid())
  studentId String
  date      DateTime
  present   Boolean
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
}

model CanteenAccount {
  id           String               @id @default(cuid())
  studentId    String               @unique
  balance      Float
  student      Student              @relation(fields: [studentId], references: [id])
  transactions CanteenTransaction[]
}

model CanteenTransaction {
  id               String         @id @default(cuid())
  canteenAccountId String
  type             String
  amount           Float
  description      String
  date             DateTime
  account          CanteenAccount @relation(fields: [canteenAccountId], references: [id])
}

model CanteenMenuItem {
  id    String @id @default(cuid())
  name  String @unique
  price Float
  stock Int
}

model AlumniProfile {
  id             String       @id @default(cuid())
  name           String
  graduationYear Int
  email          String       @unique
  phone          String
  occupation     String
  company        String
  mentorships    Mentorship[] @relation("Mentor")
}

model Mentorship {
  id        String        @id @default(cuid())
  mentorId  String
  menteeId  String
  startDate DateTime
  status    String
  mentor    AlumniProfile @relation("Mentor", fields: [mentorId], references: [id])
  mentee    Student       @relation("Mentee", fields: [menteeId], references: [id])
}

model HealthRecord {
  id           String        @id @default(cuid())
  studentId    String        @unique
  bloodGroup   String
  allergies    Allergy[]
  vaccinations Json
  student      Student       @relation(fields: [studentId], references: [id])
  clinicVisits ClinicVisit[]
}

model Allergy {
  id             String       @id @default(cuid())
  healthRecordId String
  name           String
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id])
}

model ClinicVisit {
  id             String       @id @default(cuid())
  healthRecordId String
  studentId      String
  reason         String
  treatment      String
  date           DateTime
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id])
}

model Asset {
  id           String   @id @default(cuid())
  name         String
  type         String
  status       String
  assignedToId String?
  purchaseDate DateTime
  assignedTo   Staff?   @relation(fields: [assignedToId], references: [id])
}

model Assignment {
  id      String @id @default(cuid())
  title   String
  subject String
  dueDate String
  status  String
}

model CourseMaterial {
  id      String @id @default(cuid())
  subject String
  title   String
  type    String
  link    String
}

model OnlineClass {
  id      String @id @default(cuid())
  subject String
  topic   String
  time    String
  link    String
}

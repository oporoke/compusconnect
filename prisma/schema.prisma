
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Student {
  id           String        @id
  name         String
  grade        String
  section      String
  discipline   DisciplinaryRecord[]
  grades       Grade[]
  attendance   AttendanceRecord[]
  invoices     Invoice[]
  transactions LibraryTransaction[]
  canteenAccount CanteenAccount?
  mentorshipsAsMentee Mentorship[] @relation("Mentee")
  healthRecord HealthRecord?
  hostelRoom   HostelRoom? @relation(fields: [hostelRoomId], references: [id])
  hostelRoomId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model DisciplinaryRecord {
  id          String   @id @default(cuid())
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  date        DateTime
  reason      String
  actionTaken String
}

model Exam {
  id      String  @id
  name    String
  date    DateTime
  subjects String[]
  grades  Grade[]
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId String
  examId    String
  scores    Json
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@unique([studentId, examId])
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  studentId String
  date      String
  present   Boolean
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Staff {
  id        String   @id
  name      String
  role      String
  department String
  email     String   @unique
  phone     String
  joiningDate DateTime
  salary    Float
  leavesTaken Int
  leavesAvailable Int
  performanceNotes String?
  taxDeduction Float
  insuranceDeduction Float
  schoolId String
  payrollRecords PayrollRecord[]
  assignedAssets Asset[]
}

model Asset {
    id String @id
    name String
    type String
    status String
    assignedToId String?
    assignedTo Staff? @relation(fields: [assignedToId], references: [id])
    purchaseDate DateTime
}

model Admission {
    id String @id
    name String
    age Int
    previousSchool String
    grade String
    parentName String
    parentEmail String
    date DateTime
    status String
    documents String[]
}

model FeeStructure {
    id String @id
    name String
    amount Float
    grades String[]
}

model Invoice {
    id String @id
    studentId String
    student Student @relation(fields: [studentId], references: [id])
    date DateTime
    dueDate DateTime
    items Json
    total Float
    status String
    payments Payment[]
}

model Payment {
    id String @id @default(cuid())
    invoiceId String
    invoice Invoice @relation(fields: [invoiceId], references: [id])
    amount Float
    date String
    method String
}

model PayrollRecord {
    id String @id @default(cuid())
    staffId String
    staff Staff @relation(fields: [staffId], references: [id])
    month String
    grossSalary Float
    deductions Float
    netSalary Float
    date String
}

model Expense {
    id String @id @default(cuid())
    category String
    description String
    amount Float
    date String
}

model Announcement {
    id String @id
    title String
    date DateTime
    content String
    schoolId String
}

model Event {
    id String @id
    title String
    date DateTime
    description String
}

model Book {
    id String @id
    rfid String @unique
    title String
    author String
    subject String
    isbn String @unique
    quantity Int
    available Int
    transactions LibraryTransaction[]
}

model LibraryTransaction {
    id String @id
    studentId String
    student Student @relation(fields: [studentId], references: [id])
    bookId String
    book Book @relation(fields: [bookId], references: [id])
    type String
    date DateTime
    dueDate DateTime?
}

model Vehicle {
  id       String  @id
  model    String
  capacity Int
  lat      Float
  lng      Float
  route    Route?
}

model Driver {
  id            String @id
  name          String
  licenseNumber String @unique
  contact       String
  route         Route?
}

model Route {
  id        String  @id
  name      String
  stops     Json
  vehicleId String  @unique
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  driverId  String  @unique
  driver    Driver  @relation(fields: [driverId], references: [id])
}

model Hostel {
    id String @id
    name String
    capacity Int
    rooms HostelRoom[]
}

model HostelRoom {
    id String @id
    number String
    capacity Int
    hostelId String
    hostel Hostel @relation(fields: [hostelId], references: [id])
    occupants Student[]
}

model CanteenAccount {
    id String @id @default(cuid())
    studentId String @unique
    student Student @relation(fields: [studentId], references: [id])
    balance Float
    transactions CanteenTransaction[]
}

model CanteenTransaction {
    id String @id
    canteenAccountId String
    account CanteenAccount @relation(fields: [canteenAccountId], references: [id])
    type String // credit or debit
    amount Float
    description String
    date DateTime
}

model CanteenMenuItem {
    id String @id @default(cuid())
    name String @unique
    price Float
    stock Int
}

model AlumniProfile {
    id String @id
    name String
    graduationYear Int
    email String @unique
    phone String
    occupation String
    company String
    donations Donation[]
    mentorshipsAsMentor Mentorship[] @relation("Mentor")
}

model Donation {
    id String @id @default(cuid())
    alumniId String
    alumni AlumniProfile @relation(fields: [alumniId], references: [id])
    amount Float
    purpose String
    date String
}

model Mentorship {
    id String @id
    mentorId String
    mentor AlumniProfile @relation("Mentor", fields: [mentorId], references: [id])
    menteeId String
    mentee Student @relation("Mentee", fields: [menteeId], references: [id])
    startDate DateTime
    status String
}

model HealthRecord {
    id String @id @default(cuid())
    studentId String @unique
    student Student @relation(fields: [studentId], references: [id])
    bloodGroup String
    allergies String[]
    vaccinations Json
    clinicVisits ClinicVisit[]
}

model ClinicVisit {
    id String @id
    healthRecordId String
    healthRecord HealthRecord @relation(fields: [healthRecordId], references: [id])
    reason String
    treatment String
    date DateTime
}

model Assignment {
  id      String @id @default(cuid())
  title   String
  subject String
  dueDate String
  status  String
}

model CourseMaterial {
  id      String @id @default(cuid())
  title   String
  subject String
  type    String
  link    String
}

model OnlineClass {
  id      String @id @default(cuid())
  topic   String
  subject String
  time    String
  link    String
}

model Conversation {
  id        String   @id
  members   String[]
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         String
  content        String
  timestamp      DateTime     @default(now())
}
